using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Динамические.действия
{

    // это действие одной строки кода последовательности
    // каждую строку кода можно определить как функцию
    public class СтрокаДействия
    {
        public string ИмяПроцесса; // имя сстояния = имя процесса
        public string Имядействия; // 
        // имя процесса =сложение (что делаешь?) складываю
        // имя команды =сложи ((что),(что) и (что)), цель = сложить числа, получить результат
        // параметры с именами и атрибутами ="слогаемое 1" это группа 
        // тип возвращаемого результата = Число
        // имя результата Сумма (Сумма должна указывать "имя результат" для данного действия)
        // Рецепт сложения 
        // Примеры (они же тесты)

        // строка как правило содержит последовательность или конвеер действий (вложенные действия)
        // сложение 3 чисел  =сложение 1 числа с результатом сложения 2 и 3 или прочее множество перестановок
        // надо также указать правило аддитвности = неизменности результата от перестановки 
        // сложение может определить как сложение столбиком 3-х чисел, т.е. не сводимое к вложеным действиям

        //конкретное действие , как вариант команда = сложи( 3, Х,10)
        // если добавить умножение то появиться формула правило (а+р)*п = а*п+ р*п
        // т.е. можно будет заменить минимизировать вычисления, или произвести частичное вычисление если есть цифры

        // каждая строка последовательности это узел некоторого шаблона, это не просто ряд строк
        // также как предложение это не ряд символов
        // создание временных переменных (объектов) имеет некотрую цель, кторая определяется вышестоящей целью

        //действия имеют длину как данные, по ней можно определять эффективность, расчет надо вести в элементарных единицах  тиках, как данные в байтах
        // 
    }

    public class ОпределениеДействия
    {
        public string ИмяДействия;
        public Func<object, object> КодУправляемый;
        public Dictionary<string, object> СписокПолей;

        public void ТЕст()
        {
            var создатьПеременную = new ОпределениеДействия();
            создатьПеременную.ИмяДействия = "Создать Переменную";// где создать
            создатьПеременную.СписокПолей["Имя Переменной"] = null;
            КодУправляемый = СоздатьПеременную;
        }

        private object СоздатьПеременную(object списокПараметров)
        {
            return null;
        }
    }

    // интерфейс составления программы 
    // активность имеет свободную переменную реакция на сигнал, сигнал это получение от связи команды ПришлаКоманда или имеет список команд, связь ищет команду и запускает ее.
    // активность также имеет список внутренних переменных-данных, которые сохраняются между вызовами команд
    // активность может иметь внутрений процессор, а не каждая связь. ТОгда этот процессор запускается и работает непрерывно. Воздействовать на него не возможно. Можно предусмотреть ему внутренние команды завершения. Запустить его повторно можно только извне. После остановки активность будет иметь набор ненулевых переменных. Запуск активности может приводить к запуску внутренних процессов связи. Связи это тоже внутренние переменные, которые объедениныв группу
    // минимальный набор полей активности, Список переменных(Данные, Методы), Процессор(ы), Команда Запуск()= Создать процессор, Запустить Цикл работы процессора= один из методов типа Main()
    // для связей с процессорами Запуск= Запустить процессы всех связей, Выход.
}
