using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using Виды;
using Динамические.Примитивы;

namespace Динамические.Виды
{
    public class ВидГруппаГоризонтальная : ВидГруппаОбъектов
    {
        private ГруппаАдресовИзСловаря Группа2 => (ГруппаАдресовИзСловаря) Объект;
        private ГруппаТипизированная Словарь => Группа2.Перечисление;
        private Type ТипВида;// если значения адресов из словаря имеют один тип, то и вид один
        public ВидГруппаГоризонтальная(): base()
        {
            
            Панель.Orientation = Orientation.Horizontal;
            ВидПустогоСписка = new ВидСимвола() { ВидРодитель = this };
            ВидПустогоСписка.ДобавьСодержание(new Символ(' '));

        }

        public override void ДобавьСодержание(РАМОбъект объект)
        {
            //ВидПустогоСписка = ВыбратьВид(new Символ(' '));
            //ВидПустогоСписка = new ВидКурсорВставки {
            //    Тип = ВидКурсорВставки.ТипКурсора.Горизонтальный, ВидРодитель =this };

            base.ДобавьСодержание(объект);
        }
        //public override void ПодкраситьВыбранный(int новый, int старый)
        //{
        //    if (СписокВидов.Count == 0) return;

        //    УбратьКурсор(старый);
        //    ДобавитьКурсор(новый);

        //}
        public override void УбратьКурсор(int старый)
        {
            if (старый >= -1 && старый < СписокВидов.Count)
            {
                  this[старый+1].BorderBrush = Brushes.White;
                this[старый+1].BorderThickness = new System.Windows.Thickness(0, 0, 0, 0);
            }
        }
        public override void ДобавитьКурсор(int новый)
        {
            if (новый >= -1 && новый < СписокВидов.Count)
            {
                 this[новый+1].BorderBrush = Brushes.Black;
                this[новый+1].BorderThickness = new System.Windows.Thickness(0, 0, 1, 0);
            }
        }

        protected override void ВидГруппаОбъектов_KeyUp(object sender, KeyEventArgs событие)
        {
           Key клавиша = событие.Key;
            if (клавиша == Key.Left)
            {
                if (_номерВыбранногоЭлемента != -1)
                {
                    НомерВыбранногоЭлемента--;
                }
            }

            if (клавиша == Key.Right)
            {
                if (_номерВыбранногоЭлемента < Группа.Список.Count - 1)
                {
                    НомерВыбранногоЭлемента++;
                }

            }
            if (клавиша == Key.Enter)
            {
                var группа = this[_номерВыбранногоЭлемента] as ВидГруппаОбъектов;
                if (группа != null)
                {
                    группа.Фокус();
                }
            }
            if (клавиша == Key.Escape)
            {
                var родитель = ВидРодитель as ВидГруппаОбъектов;
                if (родитель != null)
                {
                    родитель.Фокус();
                }
            }
            if (клавиша == Key.Delete)
            {
                if (НомерВыбранногоЭлемента >= -1 
                    && НомерВыбранногоЭлемента< Группа.Список.Count-1 && !ЭтоПустаяГруппа)
                {
                    Группа.Удалить(НомерВыбранногоЭлемента+1);
                    СписокВидов.RemoveAt(НомерВыбранногоЭлемента+2);
                }
            }

            if (Клавиатура.РусскаяРаскладка.ContainsKey(клавиша))
            {
                //распознование буквы от клавиатуры
                var КультураИнфо = InputLanguageManager.Current.CurrentInputLanguage;

                Адрес адресБуквы;
                    адресБуквы = Клавиатура.ДайАдресЮНИКОДаБуквыОтКодаКлавиши(клавиша );


              
                // правильнее каждый элемент должен иметь ссылку на перечисление, элемент узел шаблона
                // а группа это ряд из узлов с перечислением

                var элемент = new ПроксиОбъекта { АдресПримитива = адресБуквы};

                var вид = ВыбратьВид(элемент); // если в группе один тип, то выбор каждый раз не нужен

                if (ЭтоПустаяГруппа)
                {
                    //СписокВидов.Clear();// очистить панель от вида пустого списка
                    Группа2.Вставить(0, элемент);
                    Панель.Children.Insert(1, вид);
                }
                else
                {
                    Группа2.Вставить(_номерВыбранногоЭлемента+1, элемент);
                    Панель.Children.Insert(_номерВыбранногоЭлемента + 2, вид);
                }
                

               
                //for (int и = НомерВыбранногоЭлемента + 2; и < Группа.Список.Count+1; и++)
                //{
                //    var вид2 = (ОбщийВид)СписокВидов[и];
                //    вид2.ОбновитьВид(); // стирает контент 
                //}

                НомерВыбранногоЭлемента++;
            }
           

        }
    }
}
