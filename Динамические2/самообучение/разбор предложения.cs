using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Динамические
{
    public class разбор_предложения
    {

        public Предложение РазобратьТекст(string Текст)
        {
            var предложение=  new Предложение();
            object заполняемыйШаблон=null;

            for (int i  = 0; i < Текст.Length; i++)
            {
                var символ = Текст[i];
                if (символ >= 'а' && символ <= 'я')
                {
                    if (заполняемыйШаблон == null) {
                        заполняемыйШаблон = new Слово();
                        ((Слово) заполняемыйШаблон).Список.Add(символ); }
                    else if (заполняемыйШаблон is Слово)  {
                        ((Слово) заполняемыйШаблон).Список.Add(символ);  }
                    else  //заполняемыйшаблон не Слово, закончилось заполнение пробела
                    {
                        предложение.СписокОбъектов.Add(заполняемыйШаблон);

                        заполняемыйШаблон = new Слово();
                        ((Слово) заполняемыйШаблон).Список.Add(символ);
                    }
                }
                else if (символ == ' ')
                {
                    if (заполняемыйШаблон == null)
                    {
                        заполняемыйШаблон = new Пробел();
                        ((Пробел) заполняемыйШаблон).Список.Add(символ);
                    }
                    else
                    {
                        if (заполняемыйШаблон is Пробел) //продолжить заполнение пробела
                        {
                            ((Пробел) заполняемыйШаблон).Список.Add(символ);
                        }
                        else  //заполняемый шаблон не пробел,
                        {
                            предложение.СписокОбъектов.Add(заполняемыйШаблон);
                            заполняемыйШаблон = new Слово();
                            ((Слово) заполняемыйШаблон).Список.Add(символ);
                        }
                    }
                }
                else //другие символы пропуск
                {
                    заполняемыйШаблон = null;
                }
            }
            return предложение;
        }

        public List<Символ2> РазобранныйТекст = new List<Символ2>();
        public void Разбор(string Текст)
        {

            var шаблонПредложения= new ШаблонГруппы() { ИмяШаблона = "Предложение"};//здесь находиться разобранный текст 
            var шаблонПробелы = new ШаблонГруппы() { ИсходящийШаблон  = шаблонПредложения, ИмяШаблона = "Пробелы"};
            var шаблонСлова = new ШаблонГруппы() { ИсходящийШаблон  = шаблонПредложения, ИмяШаблона = "Слово"};
            

            var шаблонРаз = new ШаблонПодстроки(){Подстрока =  new ИменованнаяГруппа2(){'р','а','з'}, Шаблон = шаблонПредложения}; //может вызвать ошибку при подписке к шаблону предложения
            //шаблонРаз не соответсвует классификации 
            var шаблонСкобкиОткрыть = new ШаблонОпределенныйСимвол(){Символ = '('};
            var шаблонРазСкобкиРаз = new ШаблонПодстроки(){ПоследовательностьШаблонов = new List<Шаблон>(){шаблонРаз,шаблонСкобкиОткрыть, шаблонРаз}};

            var шаблонПробела = new ШаблонПробел(){Шаблон = шаблонПробелы};
           
            var шаблонБуква = new ШаблонБуква(){Шаблон = шаблонСлова}; // добавить сюда шаблонРаз
            // шаблон конкретного слова можно ответвить от просто слова, потом повторныый разбор на символы, потом конкретное слово
            // от обобщения можно сразу направлять символы в конкретное слово
            шаблонСлова.ТранзитныйШаблон = шаблонРаз;
            ШаблонПодстроки шаблонЧтоТоВСкобках= new ШаблонПодстроки(){Шаблон = шаблонРаз}; // ( любыеСимволы ) как вставить внутрь себя себя 
            // надо определить шаблон любойсимвол кроме "(" или сам, хотя должно быть " предложение (предложение/ само) предложение " (пусто/само)
            // можно создать альтернативную классификацию 
            // предложения будут включать в себя только английские слова 

            for (int индекс = 0; индекс < Текст.Length; индекс++)
            {
                var символ = Текст[индекс];
                var символОбъект = new Символ2(){символ = символ,АдресТекста = Текст, НомерВТексте = индекс};// тут можно устроить доп проверки 
                РазобранныйТекст.Add(символОбъект);

                шаблонРаз.ПопробоватьДобавить(символОбъект); // в предложении окажется объект типа string, раньше или позже туда добавиться Слово содержащее "раз", фильтр объектов не даст туда его добавить 
                    // это безрезультатный шаблон, в существующей классификации 
                    // если используется символОбъект, то появиться несколько объектов в предложении
                шаблонПробела.ПопробоватьДобавить(символ); //посылать нужно всем т.к. неподходящий символ является командой завершения 
                шаблонБуква.ПопробоватьДобавить(символ);
                // все неизвестные символы будут пропускаться 
                // сюда можно можно добавить обучение это ШаблонНеизвестногоСимвола
            }
            // отправить пустой символ для завершения предложения, не попадает ни в один
            шаблонПробела.ПопробоватьДобавить("");
            шаблонБуква.ПопробоватьДобавить("");

        }
    }

    
    public class АссоциированныйТекст // в этом тексте на каждом символе появиться ссылка на распознаный объект или несколько объектов - круто 
        // это позволит редактировать текст, хотя нет удаление символа потребует пересканировать весь текст, удалил пробел два слова слились, или букву "р" "раз" исчез или остался "рраз"
        // это позволит видить пересекающиеся шаблоны, нераспознанный текст 
        // предложение может быть рваным 
    {
        public List<Символ2> Текст;

    }

    public class ШаблонПодстроки : Шаблон // этот шаблон буудет находить в тексте нужную строку "раз" в "рраз" тоже найдет "рараз"
    {
        public string Подстрока1; //здесь входящие могут быть все посылающие символы 
        public ИменованнаяГруппа2 Подстрока; // это может быть список шаблонов букв, тогда это списокВходящих активностей, точнее последовательность, может быть и множество (т.е без повторов)
        public List<Шаблон> ПоследовательностьШаблонов;
        private int _текущий;

        public Шаблон Шаблон;
        public List<Символ2> СписокОтмеченныхСимволов= new List<Символ2>();
        public override bool ПопробоватьДобавить(object объект)
        {
            var ассСимвол = (Символ2) объект;
            char символ = ассСимвол.символ;

            if (ПопробоватьДобавитьВТекущуюПозицию(символ)) return true;
           // неудача символ не подходит
            // может это начало слова
            _текущий = 0;

            if (ПопробоватьДобавитьВТекущуюПозицию(символ)) return true;

            return false;
        }

        public bool ПопробоватьДобавитьВТекущуюПозицию(char символ)
        {
            if (символ == (char) Подстрока[_текущий])  // шаблон = Подстрока[_текущий]
            {
                _текущий++;
                if (_текущий > Подстрока.Count) // нашли слово 
                {
                    Шаблон.ПопробоватьДобавить(Подстрока);
                        // список в слове = Слово - нарушение определения слова (слева, справа могут быть не буквы)
                    _текущий = 0;
                }
                return true;
            }
            return false;
        }

        private void ОчиститьСимволыОтСебя()
        {
            foreach (var асимвол in СписокОтмеченныхСимволов)
            {
                асимвол.АссоциированныеОбъекты.Remove(this);
            }
            СписокОтмеченныхСимволов.Clear();//забыть символы
        }
    }

    public class Шаблон
    {
       public string ИмяШаблона;
       public virtual bool ПопробоватьДобавить( object объект) // можно добавить кто послал 
       {
           return false;
       }

    }
    public class Предложение
    {
        public List<object> СписокОбъектов = new List<object>();
        
    }

    public class ШаблонПредложение : Шаблон // это ряд из выбора
    {
        public List<string> СписокШаблонов = new List<string>() { "Слово", "Пробел" }; // это по идее не надо, присылать будут только разрешенные подписанты
                                                                                    // добавлять только эти объекты 
                                                                                    // можно добавить список разрешенных подписантов, они будут присылать только разрешенные объекты
        public Предложение Предложение ;
        public override bool ПопробоватьДобавить(object объект)
        {
            if (СписокШаблонов.Contains(объект.GetType().Name))
            {
                // в символы объекта добавить ссылку на этот шаблон 
                Предложение.СписокОбъектов.Add(объект);
                return true;
            }
            // пропустить объект 
            return false;
        }
    }

    public class Варианты : Шаблон // выбирает отправить дальше шаблон или нет
    {
        public List<Шаблон> СписокШаблонов;
        public Шаблон ИсодящиеШаблоны;
        public override bool ПопробоватьДобавить(object объект)
        {
           if (СписокШаблонов.Contains((Шаблон)объект))
            {
                ИсодящиеШаблоны.ПопробоватьДобавить(объект);
                return true;
            }
            ИсодящиеШаблоны.ПопробоватьДобавить(null);
            return false;
        }
    }


    public class ШаблонОпределенныйСимвол :Шаблон
    {
        public char Символ;
        public Шаблон Шаблон ;
        public override bool ПопробоватьДобавить(object объект)
        {
            char символ = (char) объект;
            if (символ == Символ )
            {
                Шаблон.ПопробоватьДобавить(this);
                return true;
            }
            Шаблон.ПопробоватьДобавить(null); //может создать пустой шаблон
            return false;
        }

    }
    
    public class ШаблонБуква : Шаблон
    {
        public Шаблон Шаблон; // подписант 
        public override bool ПопробоватьДобавить(object объект)
        {
            var ассСимвол = (Символ2) объект;
            char символ = ассСимвол.символ;

            if (символ >= 'а' && символ <= 'я')
            {
                ассСимвол.АссоциированныеОбъекты.Add(this);
                Шаблон.ПопробоватьДобавить(ассСимвол);
                return true;
            }
            Шаблон.ПопробоватьДобавить(null);
            // отправить шаблону слова null - шаблог слова - отправляет объект Слова в предложение, создает новое Слово
            return false;
        }

    }
    public class ШаблонПробел :Шаблон
    {
        public Шаблон Шаблон ;
        public override bool ПопробоватьДобавить(object объект)
        {
            var ассСимвол = (Символ2) объект;
            char символ = ассСимвол.символ;
            if (символ >= ' ' )
            {
                ассСимвол.АссоциированныеОбъекты.Add(this);
                Шаблон.ПопробоватьДобавить(ассСимвол);
                return true;
            }
            Шаблон.ПопробоватьДобавить(null);
            return false;
        }

    }
    public class ШаблонПробелы :Шаблон
    {
        public Шаблон Шаблон  ; //это шаблон предложения
        public Пробел Текущий;
        public override bool ПопробоватьДобавить(object объект)
        {
           if (объект == null)
            {
                if (Текущий == null) return false;

                Шаблон.ПопробоватьДобавить(Текущий);
                Текущий= null;
                return true;
            }
            var ассСимвол = (Символ2) объект;
            ассСимвол.АссоциированныеОбъекты.Add(this);

            if (Текущий == null)
            {
                Текущий= new Пробел();
            }
            Текущий.Список.Add(объект);
            return true;
        }

    }
    public class ШаблонСлова : Шаблон // этот шаблон получает все что дают и складывает в контейнер Пробел или Слово, может быть другой контейнер
    {
        public Слово Текущий;
        public Шаблон ИсходящийШаблон;
        public bool ОбработатьСимвол(char символ)
        {

            return false;

        }
        public override bool ПопробоватьДобавить(object объект)
        {
            if (объект == null)
            {
                if (Текущий == null) return false;
                ИсходящийШаблон.ПопробоватьДобавить(Текущий);
                Текущий= null;
                return true;
            }

            var ассСимвол = (Символ2) объект;
            ассСимвол.АссоциированныеОбъекты.Add(this);

            if (Текущий == null)
            {
                Текущий= new Слово();
            }
            Текущий.Список.Add(объект);
            return true;


        }
    }

    public class ИменованнаяГруппа
    {
        public List<object> Группа = new List<object>();
        public string ИмяГруппы;
        public Шаблон ШаблонГруппы;

    }
    public class ИменованнаяГруппа2 :List<object>
    {
        public string ИмяГруппы;
        public Шаблон ШаблонГруппы;
        public List<object> СписокРеакций;

    }

    public class ШаблонГруппы : Шаблон // этот шаблон получает все что дают и складывает в контейнер Пробел или Слово, может быть другой контейнер
    {
        public ИменованнаяГруппа2 ТекущаяГруппа;
        public Шаблон ИсходящийШаблон;
        public Шаблон ТранзитныйШаблон;
        
        public override bool ПопробоватьДобавить(object объект)
        {
            if (объект == null)
            {
                if (ТекущаяГруппа == null) return false;
                ИсходящийШаблон.ПопробоватьДобавить(ТекущаяГруппа);
                ТекущаяГруппа= null;
                return true;
            }

            //var ассСимвол = (Символ) объект;
            //ассСимвол.АссоциированныеОбъекты.Add(this);

            if (ТекущаяГруппа == null)
            {
                ТекущаяГруппа= new ИменованнаяГруппа2(){ИмяГруппы = ИмяШаблона,ШаблонГруппы = this};
            }
            ТекущаяГруппа.Add(объект);
            // отправить объект транзитом для частных случаев
            ТранзитныйШаблон.ПопробоватьДобавить(объект);
            return true;


        }
    }


    public class Слово
    {
        public List<object> Список;
        private int началоСлова;
        private int конецСлова;

    }
    public class Пробел
    {
        public List<object> Список;
    }

    public class Символ2
    {
        public char символ; // = АдресТекста(номер)
        public int НомерВТексте;
        public string АдресТекста;
        public List<object> АссоциированныеОбъекты;

    }


}
