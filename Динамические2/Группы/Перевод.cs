using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Динамические.Группы
{
    //ПростейшийПеревод Таблица соответствия 
    // это вариант общей трансформации преобразования одного типа в другой например словаря объектов в экземпляр C#  и обратно
    //это частный случай Словаря 
    public class Перевод
    {
        public ГруппаТипизированная СписокРуский = new ГруппаТипизированная() {ТипХранящихсяОбъектов = typeof(СтрокаЮникода)}; // это может быть адрес словаря общий + список адресов из этого словаря, тогда этот класс будет контекстом перевода, таких контекстов может быть несколько
                                                   // только слово не знает о контекстах , можно поместить набор ссылок на такие контексты в само слово, получим все варианты
        public ГруппаТипизированная СписокАнглийский = new ГруппаТипизированная() { ТипХранящихсяОбъектов = typeof(СтрокаЮникода) };

        public СтрокаЮникода ДайРусский(СтрокаЮникода словоАнг)
        {
            var номер =
                СписокАнглийский.Список.FindIndex(слово => ((СтрокаЮникода) слово).Значение == словоАнг.Значение);
            if (номер > 0) return (СтрокаЮникода) СписокРуский[номер];
            return null;
        }
        public СтрокаЮникода ДайАнглийский(СтрокаЮникода словоРус)
        {
            var номер =
                СписокРуский.Список.FindIndex(слово => ((СтрокаЮникода)слово).Значение == словоРус.Значение);
            if (номер > 0) return (СтрокаЮникода)СписокАнглийский[номер];
            return null;
        }

        public void ДобавитьПару(СтрокаЮникода русское, СтрокаЮникода английское)
        {
            СписокРуский.Список.Add(русское);
            СписокАнглийский.Список.Add(английское);
        }

    }

    // тоже перевод - одного типа в другой 
    public class СтрокаString
    {
        public string Вstring( СтрокаЮникода строка)
        {
            return строка.Значение;
        }
        public СтрокаЮникода ВСтроку(string изString)
        {
            return new СтрокаЮникода(изString);
        }
    }



}
