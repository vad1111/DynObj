using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Динамические.активности
{

    // эмитация связей - 
    // карта объектов
    // каналов как объектов нет
    // канал это объект (дорга имеет длину, другие хаактеристики(качество), адреса концов)
    // стацСвязь имеет адрес одного из концов дороги- канала  Дорога =(АдресКонцаА,АдресКонцаБ)+(буферА, буферБ)
    // АдресДороги+АдресКонца по нему можно найти АдресСвязи
    // канал как отдельный объект можно исключить 
    // канал это тоже разновидность псевдоактивности только с двумя связями
    // модель канала-дороги нужна для построения модлей реальных объектов.
    // объект находится в куче (адресв куче)
    // группа это тотже объект только с особым типом связей
    // каждый объект это группа связей (адрсе связь удаленная, тип связи, тип отношения и т.д)

    public enum ТипСвязи {
        //Имя,
        Группа,ЧленГруппы,            // группа это агент-центр звезды
        Ряд, ЧленРяда,                 //  разновидность группы цепь илли Ряд Группа с номерами одинковых типов
        Перечисление, ЧленПеречисления, // разновидность группа, нумерованое множество, должно иметь еще и число
        Структура, ЧленСтруктуры ,      // цепь, члены разного типа
        Множество,ЭлементМножества, // группа с элементами ненумероваными, аналог просто Группы
        //двумерные варианты
        Вектор, ЧастьВектора    // Строка, подстрока - Массив, подмассив  Это Ряд но с 2координатами (Строка, столбец)
                                   // Ряд (адрес+ смещение  - окружение слева, справа
        //трехмерные
        ,Матрица, КусокМатрицы
         //многомерые  - теоретически
         ,Тензор, КусокТензора  ,


        ЦепьПредыдущий, ЦепьНачало, ЦепьСледующий, ЦепьКонец, 
        Сосед,// один уровень 
        
        Соответствие         //перевод в другое адресное прост руская буква а - код 1072
        ,Ассоциация,        // неопредленый тип     - самый общий 

        ВременнаяАссоциация  //  это другой аспект связи во времени а не в пространстве
        
    }

    public enum ТиНапрвления
    {
        Входящая, Исходящая, Двусторонняя
    }
    // это просто объект с двумя адресами и набора атрибутов
    // простейший вариант два адреса в куче как здесь
    // если используется Адрес это не куча, а другое адресное пространство
    // заменть просто атрибутами к полям нельзя, удаленыый экз ничего не знает родителей, партнере,

    public class СтацСвязь   : РАМОбъект
    {
        public Адрес АдресСобПА;
        public Псевдоактивности СобствПА;
        public Адрес АдресУдаленойСвязи;
        public СтацСвязь УдаленнаяСвязь;
        public ТипСвязи Тип;
        public ТиНапрвления Направление;
        public Псевдоактивности УдаленнаяАктивность => УдаленнаяСвязь.СобствПА;

    }
    // сложности с привязкой в списске связей в активности нужно заводить два списка где ты 1-ый или 2-ой
    public class СтацСвязь2
    {
        public Псевдоактивности ПА1;
        public Псевдоактивности ПА2;
        public ТипСвязи Тип;              // тип от 1 к 2 , от 2 к 1 простообратный
        public ТиНапрвления Направление12;    // одостороняя 10, 01, двустороняя 11, 

    }

    // аналог просто Группы,  который состоит только из списка элементов, + след ограничения 
    // элементы всегда одинаковые типа СтацСвязь
    // стацсвязь может соединяться только со стацсвязью и самой ПА
    // стацсвязь это тоже группа из 2 адресов и нескольких атрибутов 
    // противополжная стац связь должна иметь противополжные атрибуты 
    //  это может быть ГруппаОбъектов (СтацСвязи находяться в адресном пространстве Группы)
    // адрес этой ГруппыОбъектов позволяет получить только адреса СтацСвязей + допОбъекты возможно (значения)
    //      набор команд
    // это ГруппаАдресов либо ГруппаСКэшем, где храняться Абсолютные Адреса Объектов из некоторых пространств
    // либо АдресКэша+ ОтносительныеАдреса Объектов (Смещения в Ассмблере) - более экономный вариант
    // т.е. АдресКэша и Адреса СтацСвязей 


    // ГруппаОбъектов это АдресноеПротсранство, Отличительная черта Пространства- это хранение объектов
    // т.е. набор методов ДобавитьВКонец(расширение пространства),Вставить(раздбижка пространства),
    // Удалить(опутошить или сжать пространство), 
    // ДайОбъект по адресу, НаОбъект по адресу
    // Имеет РазмерПространства (если это 3-х мерное пространство, то адрес состоит из 3 чисел типа int т.е. -2млрд, до 2 млрд)
    // Это может быть н-мерное пространство, где адреса это одинаковой длины группы чисел
    // Это может быть разномерное пространство, адреса с разной длиной группы чисел (набор символов- слов) -это словарь
    // трехмерное протсранство резервировать нет смысла, если оно малозаполнено   поэтому
    // обычно делают Пространство сцены, и каждому объекту присваивают 3 числа, Может оказаться что разные объекты имеют одинаковые адреса
    // можно организовать сжатое хранение без резервирования памяти, добавлять координаты только если там пусто  - это словарь
    // Адрес это 3 числа. Пространства вроде нет, а оперирование адресом есть. Объект меняет этот адрес. У объекта есть локальные координаты
    // внутренние (локальные) координаты можно пересчитать в глобальные.
    //  РазмерПространства может быть фиксированый (массив), либо сжатый расширяемый, Адреса фиксированой длины, нефиксированой длины
    // ЕмкостьПространства - максимальное количество 
    // Способ хранения - последовательный (адреса идут строго +1), перемешанные (словарь), отсортированые перемешанные
    
    // Здесь ПА и СтацСвязи существуют а адресном пространстве Кучи
    // ПА это самостоятельный объект его можно сохранить. Разрыв по линии связи. Восстановить связи будет невозможно.
    // Все ПА связаны и сохранение одного приведет к сохранению всей сети.
    // Чтобы исключть зацикливания, надо сформировать список ПА и проверять сохранен или нет
    // При востановлении надо знать УН удаленной связи, На втором проходе в списке всех связей НайтиСвязьПоУН
    // Если сохранять всю сеть востановить ее тоже легко. Все адреса переносяться в новое пространоство 
        // Группы ПА(составляющие объекты) можно растащить по разным Пространствам
    // Как связываются ПА из разных пространств? Ответ через совместное пространство (Фон на картине)

    public class Псевдоактивности : РАМОбъект
    {
        public List<СтацСвязь> СписокСвязей;
        public ПСтрока Имя; // тоже связь одностороння с типом Имя

        public object Значение;
        //public Dictionary<object, object> Словарь;
        public virtual void Получи(object сигнал) { }
        /// <summary>
        /// отправить всем исходящим
        /// </summary>
        /// <param name="сигнал"></param>
        public virtual void Отправить(object сигнал) { }

        // ГруппаОбъектов похоже на папку только вместо имен номера 
        public void ПереносПАвДругоеПростр(ГруппаОбъектов дрПространство, Псевдоактивности ПА)
        {
            var аПАновое = дрПространство.Добавить(ПА);    // здесь Адрес уже полный по нему можно найти адрес в Куче  СобствАдрес Па меняется
            foreach (var связь in ПА.СписокСвязей)
            {
                var старыйАдрес = связь.СобственныйАдресПримитива;

                var новыйАдресСвязь = дрПространство.Добавить(связь);
                связь.АдресСобПА = аПАновое;

                // если связь содержит Удаленную Связь ( в случае только Входящей связи, удаленные неизвестны)  Удаленные ПА потеряют эту ПА
                if (связь.Направление == ТиНапрвления.Входящая)
                {
                    // можно оставить переадресацию, вместо СпецСвязи, по старому адресу будет новый адрес или Прокси.
                    var прокси = new Переадресация() {НовыйАдрес = новыйАдресСвязь};
                    ((ГруппаОбъектов) старыйАдрес.АдресРегистратора.АдресВКучеПамяти()).Заменить(старыйАдрес,прокси);
                }
                else
                {
                    if (связь.Направление != ТиНапрвления.Исходящая)
                    {
                        связь.УдаленнаяСвязь.АдресУдаленойСвязи = новыйАдресСвязь;
                     // сообщение удаленой связи о смене своего адреса
                    // адрес связи в Куче не меняется 
                    }
                    // в противном случае УдаленнаяСвяь ничего незнает об этой связи

                }
               
                
                
            }
        }

        public static (СтацСвязь, СтацСвязь) СоздатьСвязь(Псевдоактивности па1, Псевдоактивности па2)
        {
            var св1 = new СтацСвязь() { СобствПА = па1, };
            var св2 = new СтацСвязь() { СобствПА = па2, };

            св1.УдаленнаяСвязь = св2;
            св2.УдаленнаяСвязь = св1;

            па1.СписокСвязей.Add(св1);
            па2.СписокСвязей.Add(св2);

            return (св1, св2);
        }
        public void ДобавитьСвязьС(Псевдоактивности пс, ТиНапрвления напр, ТипСвязи типСвязи)
        {
            var (св1, св2) = СоздатьСвязь(this,пс);
            св1.Направление = напр;
            св1.Тип = типСвязи;
            св2.Направление = Обратная(напр);
            св2.Тип = ОбратныйТип(типСвязи);
            this.СписокСвязей.Add(св1);
            пс.СписокСвязей.Add(св1);
        }
        private ТиНапрвления Обратная(ТиНапрвления напр)
        {
            switch (напр)
            {
                case ТиНапрвления.Входящая: return ТиНапрвления.Исходящая;
                case ТиНапрвления.Исходящая: return ТиНапрвления.Входящая;
            }
            return ТиНапрвления.Двусторонняя;
        }

        ТипСвязи ОбратныйТип(ТипСвязи типСвязи)
        {
            return типСвязи;
        }
        // роль псевдоактивности определяется типами связи, но возможен вариант нечеткости ни ряд, ни структура

        // это создание группы с перечислениями
        public (СтацСвязь, СтацСвязь) ДобавитьЧленПеречисления( Псевдоактивности па)
        {
            // проверить наличия с связей
            var (св1, св2) = СоздатьСвязь(this, па);
            св1.Тип = ТипСвязи.Перечисление;
            св2.Тип = ТипСвязи.ЧленПеречисления;

            return (св1, св2);
        }
        public (СтацСвязь, СтацСвязь) ДобавитьЧленГруппы(Псевдоактивности па)
        {
            // проверить наличия с связей
            var (св1, св2) = СоздатьСвязь(this, па);
            св1.Тип = ТипСвязи.Группа;
            св2.Тип = ТипСвязи.ЧленГруппы;

            return (св1, св2);
        }
        // добавиться в группу
        public (СтацСвязь, СтацСвязь) ДобавитьГруппу(Псевдоактивности па)
        {
            // проверить наличия с связей
            var (св1, св2) = СоздатьСвязь(this, па);
            св2.Тип = ТипСвязи.Группа;
            св1.Тип = ТипСвязи.ЧленГруппы;

            return (св1, св2);
        }
        // связей с псевдоак может быть несколько
        public СтацСвязь НайдиИДайСвязьС ( Псевдоактивности па)
        {
            foreach( var св in СписокСвязей)
            {
                if (св.УдаленнаяСвязь.СобствПА == па) return св;
            }
            return null;
                
        }
    }

    public class ПримерИспользования
    {

        public static void Псевдоактивности()
        {
            var Куча = new ГруппаСКучей();
               //var КодрусбукваА = new Псевдоактивности() { Имя = "1072" };

            // код это источник рсапознования из строки в набор букв
            // и одновременно обратного преобразования
         
            // а это буква, а является буквой, а это буква руского алфавита
            // связь создает сразу два объекта СтацСвязь
            // обучение = создание кучи типизированных связей и отмечание весов связей


        }
    }
}
