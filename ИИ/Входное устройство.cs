using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using global::Динамические;

namespace ИИ
{
    // активность должна иметь описание 
    // она должна давать ответ на вопрос
    // что это? Активность среды Динамические, активность это динамический примитив 
    // в какой среде работает ? Windows, fraimwork (требуемые сборки) , Динамические объекты (требуемые сборки), среда WPF 
    // Что делает? создает окно ввода текста с клавиатуры, введенный текст отправляет подписчикам в виде строки
    //            , принимает текст с клавиатуры, отображает процесс ввода на экране, отсылает набранную строку подписчикам по нажатию Enter
    // что это? относиться к группе вводных программых устройств от человека черерез клавиатуру = поддерживает команды: прими текст с клавиатуры, отправь текст 
    // можно встроить реакцию поиска приемных устройств, если исходящих адресов нет сообщить о своем существовании кому-то, попытать связаться, 
    // альтернативный сценарий - должна существовать активность которая регулярно просматривает активности и удаляет их или настраивает, или чинит - сборщик мусора, настройщик, ремонтник
    // самонастраивающаяся активность требует наличия собственного  процессора
    // Твоя цель? = внутренняя команда= примать текст с клавиатуры 
    public class Входное_устройство : Активность
    {

        // это элемент визуализации из присоединенного справочника
        //это входящая активность отсуда получаются команды и туда не передаются
        Текстовый_Ввод окно = new Текстовый_Ввод(); // это источник входящих сообщений 

        public override void Запуск()
        {
            if (Application.Current != null && Application.Current.MainWindow != null) окно.Owner = Application.Current.MainWindow;
            окно.Активность = this; // обратная связь
            окно.Show();
        }
        public override void Закрыть()
        {
            окно.Close();
        }

        
        public override void СохранисьВ(BinaryWriter писатель)
        {
            base.СохранисьВ(писатель);
            писатель.Write(окно.Top);
            писатель.Write(окно.Left);

        }

        public override РАМОбъект Восстановить(BinaryReader читатель)
        {
            var входноеУстройство= (Входное_устройство) base.Восстановить(читатель);
            входноеУстройство.окно.Top = читатель.ReadDouble();
            входноеУстройство.окно.Left = читатель.ReadDouble();
            return входноеУстройство;

        }
    }
}
