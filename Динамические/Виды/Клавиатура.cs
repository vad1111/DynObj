using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows;
using System.Windows.Input;
using Динамические;
using Динамические.активности;
using Динамические.Примитивы;
using РасширениеType;

namespace Виды
{
    public static class Клавиатура
    {
        static Клавиатура()
        {
            //var КультураИнфо = InputLanguageManager.Current.CurrentInputLanguage;
            
            byte первый = 0;
            byte последний = 172;

            var именаКлавиш = Enum.GetNames(typeof(Key));
            var номер = Enum.ToObject(typeof(Key), 10);
            var h = new Key();
            var Юникод = (int) Key.A;
            
            foreach(var клавиша in  именаКлавиш)
            {
                Клавиши.Добавить( new Строка(клавиша));
            }

           




            ЮНИКОДСимволКодыРусскихБуквПрописные = new ГруппаТипизированная()
            {
                ТипХранящихсяОбъектов = typeof(Символ)
            };
            var ЮНИКОДСимволКодыРусскихБуквЗаглавные = new ГруппаТипизированная()
            {
                ТипХранящихсяОбъектов = typeof(Символ)
            };

            ЮНИКОДРусскихБукв = new ГруппаОбъектов();

            char большая;

            for (var с = 'а'; с <= 'е'; с++)
            {
                большая = с.ToString().ToUpper()[0];
                ЮНИКОДСимволКодыРусскихБуквПрописные.Добавить(new Символ(большая));
                ЮНИКОДСимволКодыРусскихБуквПрописные.Добавить(new Символ(с));
                ЮНИКОДРусскихБукв.Добавить(new ЦелоеЧисло(с));
            }
            большая = 'ё'.ToString().ToUpper()[0];
            ЮНИКОДСимволКодыРусскихБуквПрописные.Добавить(new Символ(большая));
            ЮНИКОДСимволКодыРусскихБуквПрописные.Добавить(new Символ('ё'));
            ЮНИКОДРусскихБукв.Добавить(new ЦелоеЧисло('ё'));
            for (var с = 'ж'; с <= 'я'; с++)
            {
                большая = с.ToString().ToUpper()[0];
                ЮНИКОДСимволКодыРусскихБуквПрописные.Добавить(new Символ(большая));
                ЮНИКОДСимволКодыРусскихБуквПрописные.Добавить(new Символ(с));
                ЮНИКОДРусскихБукв.Добавить(new ЦелоеЧисло(с));
            }

            var русскаяРаскладка = new Dictionary<Key, char>
            {
                [Key.F] = 'а',
                [Key.OemComma] = 'б',
                [Key.D] = 'в',
                [Key.U] = 'г',
                [Key.L] = 'д',
                [Key.T] = 'е',
                [Key.Oem3] = 'ё',          
                [Key.Oem1] = 'ж',           
                [Key.P] = 'з',
                [Key.B] = 'и',
                [Key.Q] = 'й',
                [Key.R] = 'к',
                [Key.K] = 'л',
                [Key.V] = 'м',
                [Key.Y] = 'н',
                [Key.J] = 'о',
                [Key.G] = 'п',
                [Key.H] = 'р',
                [Key.C] = 'с',
                [Key.N] = 'т',
                [Key.E] = 'у',
                [Key.A] = 'ф',
                [Key.Oem4] = 'х',
                [Key.W] = 'ц',
                [Key.I] = 'ш',
                [Key.O] = 'щ',
                [Key.M] = 'ь',
                [Key.Oem6] = 'ъ',          
                [Key.Oem7] = 'э',           
                [Key.OemPeriod] = 'ю',          
                [Key.Z] = 'я'
            };
                                                  
            РусскаяРаскладка = new Dictionary<Key, Адрес>();
            // здесь должна быть пара key, modifiers
            
            //}; // или Инт это трансформация
            // слварь это описание типа связей между элементами (одностороней поиск по ключу)
            // клавишам можно сопаставить действия (удалить, Вставить,)
            //var словарьЮникода = new Dictionary<Адрес, Строка>(); // либо инт 
            foreach( var key in русскаяРаскладка.Keys)
            {
                try
                {
                    var символ = русскаяРаскладка[key];
                    РусскаяРаскладка[key] =
                           ЮНИКОДСимволКодыРусскихБуквПрописные.Список.Find(
                               c => ((Символ)c).Значение == символ).СобственныйАдресПримитива;
                }
                catch { }
            }
        }

        public static IInputElement ЭлементВФокусе1 => Keyboard.FocusedElement;
        public static ВидГруппаОбъектов ГруппаВФокусе ;
        public static ГруппаОбъектов Клавиши = new ГруппаОбъектов();
        public static Dictionary<Key, Адрес> РусскаяРаскладка;

        public static Адрес ДайАдресЮНИКОДаБуквыОтКодаКлавиши(Key клавиша)
        {
            if (Keyboard.Modifiers != ModifierKeys.Shift)
            {
                return (Адрес)Клавиатура.РусскаяРаскладка[клавиша].Копировать();
            }
            // исправить большие буквы
            return (Адрес)Клавиатура.РусскаяРаскладка[клавиша].Копировать();

        }
        public static ГруппаТипизированная ЮНИКОДСимволКодыРусскихБуквПрописные;
        public static ГруппаОбъектов ЮНИКОДРусскихБукв;
        // хотя это таблица русских букв каждый элемент это буква и эта буква имеет код ЮНИКОДА
        // группа это активность с именем "русские буквы" каждая связь которой номер связи= номер буквы это активность "буква" обратная связь от буквы идет к группе "русские буквы" с именем "(н-ый) член группы" , буква имеет связь (код ЮНИКОДА) с активность имя=? значение= число( код ЮНИКОДА ), обратная связь (буква) , от кода связь с таблицей изображений, точнее с активностью "изображение символа" значение =набор линий

    }
}