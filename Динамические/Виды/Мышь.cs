using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using Динамические;

namespace Виды
{
    public class Мышь
    {
        public static Мышь Мыши;

        public class Событие
        {
            public string НазваниеСобытия;
            public List<ОбщийВид> СписокПодписанотов;

            public Событие(string название)
            {
                НазваниеСобытия = название;
            }
        }

        static Мышь()
        {
            Мыши = new Мышь();
            
        }

        public  void Заполнить()
        {
            СписокСобытий = new List<Событие>(10);
            
            СписокСобытий.Add(new Событие("Мышь сдвинулась"));
            СписокСобытий.Add(new Событие("Нажата кнопка мыши"));
            СписокСобытий.Add(new Событие("Нажата левая кнопка мыши"));
            СписокСобытий.Add(new Событие("Нажата правая кнопка мыши")); ;
            СписокСобытий.Add(new Событие("Дважды нажата левая кнопка мыши"));
            СписокСобытий.Add(new Событие("Прокручено колесико мыши"));
        }

         public static List<Событие> СписокСобытий;
         //public Клавиатура Клава; // нужно для опроса нажатия клавиш в моент свершения события
         private ВидОкно _окно ; // перехватывать все события оттуда, если окон много 
        private List<ВидОкно> _ОткрытиыеОкна; // Окна непрозрачны друг для друга Перехват придет только от одного из окон 
                                        // это важно для контекстных меню

        public ВидОкно Окно
        {
            get { return _окно; }
            set
            {
                _окно = value;
                //_окно.Окно.PreviewMouseMove += Окно_PreviewMouseMove;
                //_окно.Окно.PreviewMouseDown += Окно_PreviewMouseDown;
            }
        }


        public void ПодписатьсяНасобытие(ОбщийВид вид, string имяСобытия)
        {
            СписокСобытий.Find(событие=> событие.НазваниеСобытия==имяСобытия).СписокПодписанотов.Add(вид);
        }
        public void ОтписатьсяОтСобытия(ОбщийВид вид, string имяСобытия)
        {
            СписокСобытий.Find(событие => событие.НазваниеСобытия == имяСобытия).СписокПодписанотов.Remove(вид);
        }

        public void ПередатьСообщениеОСобытии(int номерСобытия, EventArgs аргументы, ВидОкно окно)
        {
            var подписчики = СписокСобытий[номерСобытия].СписокПодписанотов;

            foreach (var подписчик in  подписчики)
            {
                подписчик.ОбработайСобытие(this, аргументы);
            }
        }
       

      
        private void Окно_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
           
            var координатыОтноситеьноОкна = Mouse.GetPosition(_окно); // можно любой элемент внутри Окна
        }

        private void Окно_PreviewMouseMove(object sender, MouseEventArgs e)
        {

        }

        public void ЦиклМыши()
        {
            // опросить мышь
            // если произошло изменеие расположения проверить есть ли подписанты на это событие, отправить им сообщение
            // произошло именение нажатия клавиши
            // прозошло изменеие состояния колесика
            
        }
    }
}
