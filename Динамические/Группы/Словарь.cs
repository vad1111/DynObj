using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace Динамические
{
    public class Словарь : ПримитивИлиАдрес
    {
        private List<Строка> СПисокИмен=new List<Строка>(); // Сторка это ГруппаОбъектов 
        private List<ПримитивИлиАдрес> СПисокОбъектов= new List<ПримитивИлиАдрес>();

        public ГруппаОбъектов ДайПару(int номер)
        {
            if (номер >= СПисокОбъектов.Count)
                return new ГруппаОбъектов() {[0] = new Строка("ошибка"), [1] = new Строка("нет такого номера")};

            var пара = new ГруппаОбъектов
            {
                [0] = new Строка("пара:[1]Имя,[2]Объект"), // самописание
                [1] = СПисокИмен[номер],
                [2] = СПисокОбъектов[номер],
                СобственныйАдресПримитива = new АдресВГруппе() {НомерВГруппе = номер}
            };
            return пара;
        }

        internal bool Содержит(План инструкция)
        {
            throw new NotImplementedException();
        }

        public Строка ДайКлюч(int номер)
        {
            if (номер < СПисокОбъектов.Count)
            {
                var объект = СПисокИмен[номер];
                объект.СобственныйАдресПримитива = new АдресВГруппе() { НомерВГруппе = номер };
                return объект;
            }
            return new Строка();
        }

        public ПримитивИлиАдрес this[int номер]
        {
            get
            {
                if (номер < СПисокОбъектов.Count)
                {
                    var объект = СПисокОбъектов[номер];
                    объект.СобственныйАдресПримитива = new АдресВГруппе() { НомерВГруппе = номер };
                    return объект;

                }
                return new Пустота();
            }
            set { if (номер < СПисокОбъектов.Count) СПисокОбъектов[номер] = value; }
        }
        

        public ПримитивИлиАдрес this[Строка ключ]
        {
            get
            {
                var индекс = Найти(ключ);
                if (индекс != null)
                {
                    var объект = СПисокОбъектов[индекс.Value];
                    объект.СобственныйАдресПримитива= new АдресВГруппе() {НомерВГруппе = индекс.Value};
                    return объект;
                }
                return new Пустота();
            }
            set
            {
                var индекс = Найти(ключ);
                if (индекс != null)
                {
                     СПисокОбъектов[индекс.Value]= value;
                    return;
                }
                СПисокИмен.Add(ключ);
                СПисокОбъектов.Add(value);
            }
        }

        int? Найти(Строка ключ)
        {
            for (int и = 0; и < СПисокИмен.Count; и++)
            {
                if (СПисокИмен[и].Значение == ключ.Значение)
                return и;

            }
            return null;
        }

        public override void СохранисьВ(BinaryWriter писатель)
        {
            var длина = СПисокИмен.Count;
            писатель.Write(длина);
            for (int и = 0; и < СПисокИмен.Count; и++)
            {
                СПисокИмен[и].СохранисьВ(писатель);
                СПисокОбъектов[и].СохранисьВ(писатель);
            }
            
        }
        public override ПримитивИлиАдрес Восстановить(BinaryReader читатель)
        {
            var длина = читатель.ReadInt32();
            for (int i = 0; i < длина; i++)
            {
                var номерТипа = читатель.ReadByte();
                var тип = Хранилище.Типы[номерТипа];
                var k = тип.GetConstructor(Type.EmptyTypes);
                var ключ = (Строка)k.Invoke(null);
                ключ.Восстановить(читатель);
                номерТипа = читатель.ReadByte();
                тип = Хранилище.Типы[номерТипа];
                k = тип.GetConstructor(Type.EmptyTypes);
                var значение = (ПримитивИлиАдрес)k.Invoke(null);
                значение.Восстановить(читатель);

                this[ключ]= значение;
            }
            return this;
        }

        

        public override string ToString()
        {
            string строка = "Словарь";
            

            return СобственныйАдресПримитива + ":{" + строка + "}";
        }
    }
    // Словарь это разновидность распознователя преобразование Группы объектов (ряд букв)  к единственной реакции (единственному объекту)
    public class СловарьПлохой : ПримитивИлиАдрес
    {
        public Dictionary<ПримитивИлиАдрес, ПримитивИлиАдрес> СловарьDictionary= new Dictionary<ПримитивИлиАдрес, ПримитивИлиАдрес>();

        public override void СохранисьВ(BinaryWriter писатель)
        {
            var длина = СловарьDictionary.Count;
            писатель.Write(длина);
            foreach (var пара in СловарьDictionary)
            {
                var Примитив = пара.Key;
                var кодТипа = Хранилище.кодыТипов[Примитив.GetType()];
                писатель.Write(кодТипа);
                Примитив.СохранисьВ(писатель);

                Примитив = пара.Value;
                кодТипа = Хранилище.кодыТипов[Примитив.GetType()];
                писатель.Write(кодТипа);
                Примитив.СохранисьВ(писатель);
            }
        }

        public ПримитивИлиАдрес this[ПримитивИлиАдрес ключ]
        {
            get { return СловарьDictionary[ключ]; }
            set { СловарьDictionary[ключ] = value; }
        }

        public override ПримитивИлиАдрес Восстановить(BinaryReader читатель)
        {
            var длина = читатель.ReadInt32();
            for (int i = 0; i < длина; i++)
            {
                var номерТипа = читатель.ReadByte();
                var тип = Хранилище.Типы[номерТипа];
                var k = тип.GetConstructor(Type.EmptyTypes);
                ПримитивИлиАдрес ключ = (ПримитивИлиАдрес)k.Invoke(null);
                ключ.Восстановить(читатель);
                 номерТипа = читатель.ReadByte();
                 тип = Хранилище.Типы[номерТипа];
                 k = тип.GetConstructor(Type.EmptyTypes);
                ПримитивИлиАдрес значение = (ПримитивИлиАдрес)k.Invoke(null);
                значение.Восстановить(читатель);

                Добавить(ключ,значение);
            }
            return this;
        }

        public void Добавить(ПримитивИлиАдрес ключ, ПримитивИлиАдрес значение)
        {
           значение.СобственныйАдресПримитива= ключ.СобственныйАдресПримитива = new АдресВГруппе() {НомерВГруппе = СловарьDictionary.Count}; //НомерВПамяти это оносительный адрес относительно группы

            СловарьDictionary.Add(ключ,значение);
        }

        public override string ToString()
        {
            string строка = "";
            foreach (var пара in СловарьDictionary)
            {
                строка +="("+ пара.Key + "," + пара.Value+")";
            }

            return СобственныйАдресПримитива+ ":{" +строка +"}";
        }
    }
}
