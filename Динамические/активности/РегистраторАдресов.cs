using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Динамические.активности
{

    // регистратор ничего не запоминает при восстановлении 
    // использование его позволяет хранилищу перемещать объекты, вставлять, удалять
    // таких регистраторов может быть масса , возможно каждая активность должна быть регистраторм 
    // регистратор позволяет связываться объектам быстрее не через частокол групп 
    // могут быть регистраторы бозоны, где на один адрес вешается несколько активностей 
    public class РегистраторАдресов: ПримитивИлиАдрес
    {
        public class Клиент
        {
            public ПримитивИлиАдрес АдресВКуче;
            public LinkedList<ПримитивИлиАдрес> СписокАдресовВКуче;
            public Guid Пароль;
            public Клиент(ПримитивИлиАдрес п, Guid пар)
            {
                АдресВКуче = п;
                Пароль = пар;
            }
        }
        public SortedDictionary<int, Клиент> Словарь = new SortedDictionary<int, Клиент>(); // Запоминает только одного по адресу 

        public bool Зарегистрируй(int адрес, ПримитивИлиАдрес адресВКуче, Guid пароль) 
        {
            
            if (Словарь.ContainsKey(адрес)) return false;
            Словарь.Add(адрес,new Клиент(адресВКуче,пароль)); 
            return true;
        }

        public void РазРегистрируйСОсвобожденемАдреса(int адрес, Guid пароль)
        {
            if( пароль == Словарь[адрес].Пароль) // только владелец может себя удалить, хотя кто угодно может узнать пару 
            Словарь.Remove(адрес); // так кто угодно может отключить
        }
        public void РазРегистрируй(int адрес, Guid пароль)
        {
            if (пароль == Словарь[адрес].Пароль) 
                Словарь[адрес].АдресВКуче=null; 
        }

        public  АдресУРегистратора ЗарегистрируйНаСвободныйАдрес(ПримитивИлиАдрес адресВкуче, Guid пароль)
        {
            var свободныйномер = 0;
            foreach (var пара in Словарь)
            {
                if (пара.Key > свободныйномер)
                {
                    break;
                }
                свободныйномер++;
            }
            Словарь[свободныйномер] = new Клиент(адресВкуче, пароль);
            var адрес = new АдресУРегистратора
            {
                АдресРегистратора = СобственныйАдресПримитива,
                АдресРегистратораВкуче = this,
                НомерУРегистратора = свободныйномер,
            };
            return адрес;

        }
        

        public ПримитивИлиАдрес ДайАдресВкуче(int адрес)
        {
            if (!Словарь.ContainsKey(адрес)) return null;
            return Словарь[адрес].АдресВКуче;
        }


    }
}
