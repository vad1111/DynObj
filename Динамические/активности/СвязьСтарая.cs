using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Динамические.активности;

namespace Динамические
{
    public class АдресУРегистратора : Адрес
    {
        public int НомерУРегистратора;
        public РегистраторАдресов АдресРегистратораВкуче;
        public string Пароль;
        public override Связь СоздатьСвязь()
        {
            var связь = new СвязьПамять() {};
            return связь ;
        }

        public override ПримитивИлиАдрес АдресВКуче() // это для исходящей связи .  должна озвращаться Связь а не Примитив
        {
            if (АдресРегистратораВкуче == null) АдресРегистратораВкуче = (РегистраторАдресов) АдресРегистратора.АдресВКуче();
            return  АдресРегистратораВкуче.ДайАдресВкуче(НомерУРегистратора);
        }

        public bool Зарегистрировать(ПримитивИлиАдрес объект, Guid пароль) // это для входящейсвязи 
        {
            АдресРегистратораВкуче = (РегистраторАдресов) АдресРегистратора.АдресВКуче();
            return АдресРегистратораВкуче.Зарегистрируй(НомерУРегистратора, объект, пароль);
        }
    }

    //Связь разновидность адреса, от адреса отличается дополнительными параметрами типом например, именем, ТСП связь размер буфера, скорость передачи, 
        // СОхранять сеанс или нет, сколько сохранять по времени, время ожидания отклика ит.д.
    // вопрос делать ее свободной или включать в структуру активности

    // связи имеют степень жесткости или устойчивости 
    // 1 степень : соединились передали, осоединились
    // 2 сепеннь: соединились, передали, сохранили соединение, связь может оборваться- востановили соединение (повышеный расход ресурсов)
    // 3 степнь : адрес в памяти - постоянное соединение 

        // это связь в памяти между активностями в памяти
        // связь должна поддерживать регистрацию входящая // если это виртуальная связь в памяти она может поддерживаться всегда, канал связи не меняется это просто адрес экземпляра в куче
        // связь должна обеспечить передачу сообщений 
        // универсальная связь должна и регистрироваться и 
    public class СвязьПамять: Связь //это канал связи или сеанс чтобы скрыть способ реализации связи и описать ее активности "имеют" связи, связи связываются только с друг с другом 
    {
        
        public СвязьПамять АдресВКучеУдаленнаяСвязь;
        //public ПримитивИлиАдрес УдаленныйПРимитив => АдресВКучеУдаленнаяСвязь.РоднаяАктивность; // это для виртуальной связи и  прямой отдачи команд

        // часть прав на действия- владения (только эта актинвость- хранит объект), пользования, распоряжения
        // для заказчика: создавать новый объект, менять значение объекта (писать), удалять объект, получать значение объекта(читать), давать команды,
        // для подрядчика: выполнять команды (встроенные, сторонние), 
        // роль связи - Удаленный объект является, заказчиком, подрядчиком (поставщиком информации)

        //public string ИмяСвязи; // оописание связи ( у активности Буква будет связь с "а" имяСвязи= " мой экземпляр" обратно ИмяСвязи="относиться к типу"="является"="это"
        // имя связи это характеристика обмена сообщениями - это разные протоколы общения 
        // "является" = относиться к группе имеет ссылку на объект группы
        // "имеет" = имеет адрес активности, которую может менять, создавать, уничтожать, кого "имеют" такой возможностью не обладают, = имеет возможность отдавать команды
        // команда это последовательность действий : инициатор передает сообщение, реципиент получает, реципиент обрбатывает сообщение, дает ответ инциатору, переходит в состояние ожидания нового сообщения
        // обмен сообщениями более общий протокол : есть вариант послал и забыл

        //public Dictionary<ПримитивИлиАдрес, Адрес> СловарьСобственныхАдресовУРегистраторов; // один регистратор один адрес 
        public АдресУРегистратора СвойАдресУРегистратора=> (АдресУРегистратора)АдресСобственный;

        // это доступно сообщение входящийБуфер
        //Входящиие сообщения могут переписывать стирая старые (Движение мыши например, нет смысла копить историю)
        //Входящие сообщения 
        public ПримитивИлиАдрес СообщениеВходящее { get; private set; }

        public Guid Пароль;

        public АдресУРегистратора ПолучиАдресУРегистратора(Адрес адресРегистратора) // запускается только при создании новой связи перенести в сам регистратор 
        {
            var регистратор = (РегистраторАдресов) адресРегистратора.АдресВКуче() ;
            Пароль = Guid.NewGuid();
            АдресСобственный = регистратор.ЗарегистрируйНаСвободныйАдрес(this,Пароль);
            return СвойАдресУРегистратора;

            //СловарьСобственныхАдресовУРегистраторов[регистратор] = адрес; // плодить адреса у связи не стоит, многосвязей может быть у активности
            //СписокСобственныхАдресов.Add(адрес); // можно просмотреть все адреса и сравнить регистраторв
        }

        public override void Регистрация()
        {
            var рег = (РегистраторАдресов) СвойАдресУРегистратора.АдресРегистратора.АдресВКуче();
            СвойАдресУРегистратора.АдресРегистратораВкуче = рег;
            рег.Зарегистрируй(СвойАдресУРегистратора.НомерУРегистратора, this, Пароль);

        }

        public override bool УстановитьСвязь()
        { 
            АдресВКучеУдаленнаяСвязь = (СвязьПамять) АдресУдаленнойСвязи.АдресВКуче(); // это для связи в памяти 
            //АктивностьУдаленная = АдресВКучеУдаленнаяСвязь.РоднаяАктивность;
            //АдресВКучеУдаленнаяСвязь.АктивностьУдаленная = РоднаяАктивность;
            return true;
        }
        //команды от Активности
        public override void ПередайСообщение(ПримитивИлиАдрес сообщение)
        {
            if (АдресВКучеУдаленнаяСвязь == null) УстановитьСвязь();
            if (АдресВКучеУдаленнаяСвязь != null)
            {
                var копияСообщения = сообщение; // модифицируется сообщение , можно добавить 
                сообщение = null; 
                АдресВКучеУдаленнаяСвязь.ПолучиСообщение( копияСообщения);
            }
        }

        public override ПримитивИлиАдрес ПередайСообщениеСОтветом(ПримитивИлиАдрес сообщение)
        {
            if (АдресВКучеУдаленнаяСвязь == null) УстановитьСвязь();
            var ответ= АдресВКучеУдаленнаяСвязь.ПолучиСообщениеСОтветом(сообщение.Копировать());
            return ответ;
        }

        // сообщения входящие - это прерывания с заходом чужого процесса в тело связи 
        public override void ПолучиСообщение( ПримитивИлиАдрес сообщение)
        {
            //if(ВходнаяСвязь==АдресВКучеУдаленнаяСвязь) // если полученный адрес соответсвует запомненому, внутри можно попроще 
            СообщениеВходящее = сообщение;
            РоднаяАктивность.ПолучиСообщение(this, сообщение); 
            
        }
        public override ПримитивИлиАдрес ПолучиСообщениеСОтветом( ПримитивИлиАдрес сообщение)
        {
            //if (ВходнаяСвязь == АдресВКучеУдаленнаяСвязь) // если полученный адрес соответсвует запомненому, внутри можно попроще 

             return РоднаяАктивность.ПолучиСообщениеСОтветом(this, сообщение); 
             return new Пустота();
        }

       
        // 
        public static void СоздайОдностороннююСвязьВПамяти( Адрес АдресИсходящаяАктивность, Адрес адресВходящаяАктивность )
        {
            var исходящаяАктивность = (Активность)АдресИсходящаяАктивность.АдресВКуче();
            var входящаяАктивность = (Активность)адресВходящаяАктивность.АдресВКуче();

            // в исходящей создается клиент
            var связьВисходящей = new Связь() {ТипСвязи = "исходящая", ИмяСвязи = "передатчик",};
            var адресВИсходящей = исходящаяАктивность.ДобавьСвязь( связьВисходящей );// это относительныйАдрес связи относительно активности 

            // созлается сервер 
            var связьВоВходящей = new Связь() {  ИмяСвязи = "приемник", ТипСвязи = "входящая",АдресУдаленнойСвязи = адресВИсходящей};
            var адресВоВходящей= входящаяАктивность.ДобавьСвязь(связьВоВходящей);

            связьВисходящей.АдресУдаленнойСвязи = адресВоВходящей;

        }
    }

   
}
