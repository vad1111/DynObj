using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Динамические.активности
{

    // эмитация связей - 
    // карта объектов
    // каналов как объектов нет
    // канал это объект (дорга имеет длину, другие хаактеристики(качество), адреса концов)
    // стацСвязь имеет адрес одного из концов дороги- канала  Дорога =(АдресКонцаА,АдресКонцаБ)+(буферА, буферБ)
    // АдресДороги+АдресКонца по нему можно найти АдресСвязи
    // канал как отдельный объект можно исключить 
    // канал это тоже разновидность псевдоактивности только с двумя связями
    // модель канала-дороги нужна для построения модлей реальных объектов.
    // объект находится в куче (адресв куче)
    // группа это тотже объект только с особым типом связей
    // каждый объект это группа связей (адрсе связь удаленная, тип связи, тип отношения и т.д)

    public enum ТипСвязи {
        //Имя,
        ЧленГруппы, Группа,           // группа это агент-центр звезды
        Ряд, ЧленРяда,                 // цепь илли Ряд Группа с номерами одинковых типов
        ЦепьПредыдущий, ЦепьНачало, ЦепьСледующий, ЦепьКонец, 
        Перечисление, ЧленПеречисления,
        Структура, ЧленСтруктуры ,      // цепь, члены разного типа
        Соответствие         //перевод в другое адресное прост руская буква а - код 1072
        ,Ассоциация         // непоятный тип 
        //двумерные варианты
        , Вектор, ЧастьВектора    // Строка, подстрока - Массив, подмассив  Это Ряд но с 2координатами (Строка, столбец)
                                   // Ряд (адрес+ смещение  - окружение слева, справа
        //трехмерные
        ,Матрица, КусокМатрицы
         //многомерые  - теоретически
         ,Тензор, КусокТензора
    }

    public enum ТиНапрвления
    {
        Входящая, Исходящая, Двусторонняя
    }
    public class СтацСвязь
    {
        public Псевдоактивности СобствПА;
        public Адрес АдресУдаленойСвязи;
        public СтацСвязь УдаленнаяСвязь;
        public ТипСвязи Тип;
        public ТиНапрвления Направление;
        public static (СтацСвязь, СтацСвязь) СоздатьСвязь(Псевдоактивности па1,Псевдоактивности па2)
        {
            var св1 = new СтацСвязь() { СобствПА =па1, Направление = ТиНапрвления.Двусторонняя};
            var св2 = new СтацСвязь() { СобствПА = па2, Направление = ТиНапрвления.Двусторонняя };

            св1.УдаленнаяСвязь = св2;
            св2.УдаленнаяСвязь = св1;

            па1.СписокСвязей.Add(св1);
            па2.СписокСвязей.Add(св2);

            return (св1, св2);
        }
    }
    public class Псевдоактивности
    {
        public List<СтацСвязь> СписокСвязей;
        public Строка Имя; // тоже связь одностороння с типом Имя
        public Dictionary<object, object> Словарь;
        public virtual void Получи(object сигнал) { }
        /// <summary>
        /// отправить всем исходящим
        /// </summary>
        /// <param name="сигнал"></param>
        public virtual void Отправить(object сигнал) { }

        public void СоздатьСвязьС(Псевдоактивности пс, ТиНапрвления напр)
        {
            var (св1, св2) = СтацСвязь.СоздатьСвязь(this,пс);
            св1.Направление = напр;
            св2.Направление = Обратная(напр);
        }
        private ТиНапрвления Обратная(ТиНапрвления напр)
        {
            switch (напр)
            {
                case ТиНапрвления.Входящая: return ТиНапрвления.Исходящая;
                case ТиНапрвления.Исходящая: return ТиНапрвления.Входящая;
            }
            return ТиНапрвления.Двусторонняя;
        }

        public (СтацСвязь, СтацСвязь) ДобавитьЧленПеречисления( Псевдоактивности па)
        {
            // проверить наличия с связей
            var (св1, св2) = СтацСвязь.СоздатьСвязь(this, па);
            св1.Тип = ТипСвязи.Перечисление;
            св2.Тип = ТипСвязи.ЧленПеречисления;

            return (св1, св2);
        }
        public СтацСвязь СвязьС ( Псевдоактивности па)
        {
            foreach( var св in СписокСвязей)
            {
                if (св.УдаленнаяСвязь.СобствПА == па) return св;
            }
            return null;
                
        }
    }

    public class ПримерИспользования
    {

        public static void Псевдоактивности()
        {
            var Куча = new ГруппаСКучей();
            var русбуква = new Псевдоактивности() { Имя = "буква руского алфавита" };

            var русбукваА = new Псевдоактивности() { Имя = "а" };
            var русбукваБ = new Псевдоактивности() { Имя = "б" };

            русбуква.ДобавитьЧленПеречисления(русбукваА);
            русбуква.ДобавитьЧленПеречисления(русбукваБ);

            // код это источник рсапознования из строки в набор букв
            // и одновременно обратного преобразования
            var КодрусбукваА = new Псевдоактивности() { Имя = "1072" };
            // а это буква, а является буквой, а это буква руского алфавита
            // связь создает сразу два объекта СтацСвязь
            // обучение = создание кучи типизированных связей и отмечание весов связей


        }
    }
}
