using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Динамические.активности
{
    class АктивностьГруппа: Активность
    {
        // тот кто имеет внутреннее пространство, должен его сохранять
        // если пространство внутреннее, то эта активность имеет другие активности
        // если пространство внешнее, и эта активность может удалять его из пространства, то это его собственсть
        private ГруппаОбъектов ВнутреннееПространство; // это может быть список связей 

        public Адрес ДобавьАктивность(Активность активность)
        {
            var адрес = ВнутреннееПространство.Добавить(активность);
            //все активности прострастранства имеют собственный адрес и это связь типа хранилище
            // пространство это аналог кучи, только с возможностью удаленного общения
            // это мало отличается от хранилища

            return адрес;
        }
        Адрес СоздайНовуюАктивность()
        {
            var  активностьНовая = new АктивностьЗначение();

            var адресАктивности= АктивностьЗначение.СоздайАктивность(ВнутреннееПространство);

            //Хранилище.Добавить(активностьНовая);//это создать активность во внешнем пространстве

            var новаяСвязь = new Связь() {Канал = new КаналПамятьПсевдо(),ЯвляетсяКлиентом = true};
            var адрессвязи = ДобавьСвязь(новаяСвязь);

            var ещеАдресСвязи = ВнутреннееПространство.Добавить(новаяСвязь);
           

            var связьНовойАктивности = new Связь() { Канал = new КаналПамятьПсевдо() ,ЯвляетсяСервером = true,
                АдресУдаленнойСвязи = адрессвязи};// можно адрес не укзывать при первом соединении, адрес определиться и запомниться 

            var адресСвязиНовойАктивности = ВнутреннееПространство.Добавить(связьНовойАктивности);
            var адресНовойСвязиАктивности= активностьНовая.ДобавьСвязь(связьНовойАктивности);

            новаяСвязь.АдресУдаленнойСвязи = адресНовойСвязиАктивности;
            return адресАктивности.адрес;

        }

        void УдалитьАктивность(Адрес адрес)
        {
            ВнутреннееПространство.Удалить(((АдресВГруппе)адрес).НомерВГруппе);
            // надо удалить и связь
        }
        // Передать активность по адресу из внутреннего пространства в другое пространство


        ПримитивИлиАдрес ДайАдресНовойСвязиАктивности(ЦелоеЧисло номер)
        {
            // надо заводить новую открытую связь
            var адресЭлемента = ((Связь) СписокОтКогоПолучить[номер.Значение]).ПередайКоманду(new Команда("ДобавитьСвободнуюСвязь"));
            return адресЭлемента;
        }
        ПримитивИлиАдрес ДайЭлемент(ЦелоеЧисло номер)
        {
            var ответ = ((Связь)СписокОтКогоПолучить[номер.Значение]).ПередайКоманду(new Команда("ДайЗначение"));
            return ответ;
        }

        public Связь ДайСвязьСЭлементом(int номер)
        {
            var адрес = new АдресАбсолютный()
            {
                АдресРегистратора = СобственныйАдресПримитива,
                АдресОтносительный = new АдресВГруппе { НомерВГруппе = номер}
            };
            var связь = new Связь {АдресУдаленнойСвязи = адрес};

            var активность = new АктивностьУдаленноеЗначение();
            активность.ДобавьСвязь(связь);

            return  связь;
        }

    }
    // это только хранение значения ячейка хранения
    public class АктивностьЗначение : Активность
    {
        public static (Адрес адрес, Активность активность) СоздайАктивность(Группа где)
        {
            
            var активностьНовая = new АктивностьЗначение();
            var адресАкивности = где.Добавить(активностьНовая);
            return (адресАкивности, активностьНовая);
        }
        public ПримитивИлиАдрес Значение = Пустота.Статик;
        ПримитивИлиАдрес ДайЗначение()
        {
            return Значение;
        }

        ПримитивИлиАдрес НаЗначение(ПримитивИлиАдрес объект)
        {
            Значение = объект;
            return Пустота.Статик;
        }

        Адрес ДобавитьСвободнуюСвязь()
        {
            return ДобавьСвязь(new Связь() {ЯвляетсяСервером = true});
        }
    }

    public class АктивностьУдаленноеЗначение : Активность
    {
        
        Связь СвязьСУдаленнымПримитивом; // точнее это связь

        ПримитивИлиАдрес ДайЗначение()
        {
            
            return СвязьСУдаленнымПримитивом.ПередайКоманду(new Команда("ДайЗначение"));
        }
    }
}
