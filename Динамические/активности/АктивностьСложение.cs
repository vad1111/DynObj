using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Динамические
{

    // эту активность можно заменить на связку активностей , Сумму можно хранить в отдельной активности , т.е. после рассчета отправлять ее в хранилище 
    // будет 4 активности 2 входящих хранилища, 1 сумма и чистый расчетчик + 1 иницивтор отправки сообщения 
    // инициатором может быть входящие хранилища , сумма (через внешнюю инициативу)
     public class АктивностьСложение:Активность // здесь операция сложения делается местно (есть еще вариант удаленно - Сложение как услуга (посылаешь два значения или два адреса, получаешь сумму )
     {
         public ЦелоеЧисло Сумма;
         private byte КолПоступивших;
         private ЦелоеЧисло[] _Слогаемое = new ЦелоеЧисло[2]; // хранение нужно когда есть ожидание по обоим связям 
        public АктивностьСложение()
        {
            ДобавьСвязь(new Связь() // лучше создать концентратор с одной связью ТСП и пересылать через него сообщения , это хорошо когда сервера разные 
            {
                ИмяСвязи = "Слогаемое1" ,// удобнее имя вынести и роли и тип (Клиент/сервер) тоже 
                ЯвляетсяКлиентом = true,
                ЯвляетсяСервером = true,
                ТипСвязи = "входящее" // по этим связям данные всегда получаются, активно или пассивно
                
            });
            ДобавьСвязь(new Связь() // если связи имеют один и тот же собственный адрес 
            {
                ИмяСвязи = "Слогаемое2",
                ЯвляетсяКлиентом = true, // эта связь не может получить значение из ожидания
                ТипСвязи = "входящее"
            });
        }
        public АктивностьСложение(Адрес адресСлогаемого1, Адрес адресСлогаемого2): base ()
        {
            var Связь = ДайСвязьПоИмени("Слогаемое1");
            Связь.АдресУдаленнойСвязи = адресСлогаемого1; //т.к. сервер надо установить Соственныйадрес
            var связь2 = ДайСвязьПоИмени("Слогаемое2");
            связь2.АдресУдаленнойСвязи = адресСлогаемого2;
        }

         public ЦелоеЧисло Слогаемое(byte номер)
         {
            var связь = (Связь)СписокСвязей[номер];
            var резултат = (ЦелоеЧисло)связь.ПередайКоманду(new Команда("ДайЗначение"));
             _Слогаемое[номер] = резултат; // хранение слогаемого 
             return резултат;
         }

         public ЦелоеЧисло Сложи(ЦелоеЧисло слогаемое1, ЦелоеЧисло слогаемое2) // услуга интерпритатор
         {
             return слогаемое1 + слогаемое2;
         }

         public ЦелоеЧисло Сложи(Адрес АдресСлогаемого1, Адрес АдресСлогаемого2) // услуга -- нет смысла хранить ни слогаемые ни сумму есть проблема с параллельным выполнением надо делать временные связи 
         {
            var  связь = new Связь() {АдресУдаленнойСвязи = АдресСлогаемого1};
            var слог1 = (ЦелоеЧисло)связь.ПередайКоманду(new Команда("ДайЗначение"));

            связь.АдресУдаленнойСвязи = АдресСлогаемого2;
            var слог2 = (ЦелоеЧисло)связь.ПередайКоманду(new Команда("ДайЗначение"));

            return new ЦелоеЧисло(слог1.Значение + слог2.Значение);

            ДайСвязьПоНомеру(0).АдресУдаленнойСвязи = АдресСлогаемого1;
             ДайСвязьПоНомеру(1).АдресУдаленнойСвязи = АдресСлогаемого2;
            return new ЦелоеЧисло(Слогаемое(0).Значение+ Слогаемое(1).Значение);
        }

         public План ДайРецепт()
         {
             return new Сложение(); // Строка ( адресСлогаемого1 + адресСлогаемого2 )
         }

         public ЦелоеЧисло ДайЗначение() // это хранитель Значения , но не Получатель Значения , если хранения Суммы нет, то Чистый вычмслмитель 
         {
            if (_Слогаемое[0] != null && _Слогаемое[1] != null)
            {
                var сумма =new ЦелоеЧисло(_Слогаемое[0].Значение + _Слогаемое[1].Значение);
                Сумма.Значение = _Слогаемое[0].Значение + _Слогаемое[1].Значение;
                return сумма; // без хранения  

            }
            return Сумма; // с хранением без вычисления 
            // можно еще вернуть частмчный вариант например Сумма= 2+ Значение по адресу
        }
         public override void ПолучиСообщение(Связь связь, ПримитивИлиАдрес сообщение) // это вариант с подпиской связь это представитель некоторой удалееной активности можно общаться с образом Активности
         {
             var индексСвязи = ((АдресВАктивности) связь.СобственныйАдресПримитива).номер;
            
             _Слогаемое[индексСвязи] = (ЦелоеЧисло)сообщение;

             if (_Слогаемое[0] != null && _Слогаемое[1] != null)
             {
                Сумма.Значение = _Слогаемое[0].Значение + _Слогаемое[0].Значение; // автоматическое срабатывание 
                ОтослатьСообщениеВсемИсходящим(Сумма);
             }

        }
         public int КоличествоАктуальныхСвязей() // подсчитывает количество соединений с поставщиками
         {
             var кол = 0;
             foreach (var Число in _Слогаемое)
             {
                 if (Число != null) кол++;
             }
             return кол;
         }

        public void Сложить()
        {
            Сумма.Значение = Слогаемое(0).Значение + Слогаемое(1).Значение;

            ОтослатьСообщениеВсемИсходящим(Сумма);

        }

         public ЦелоеЧисло СложитьУдаленно(Связь Процессор)
         {
            // передать команду с указанием адресов 
             return null;
         }
    }
}
